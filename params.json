{"name":"ngFacebook","tagline":"Facebook SDK wrapper for AngularJS Apps","body":"**ngFacebook** is a Facebook SDK wrapper for AngularJS Apps. It aims to minimum configuration Facebook support to AngularJS applications.\r\n\r\n## Installation\r\n\r\n```\r\nbower install --save ngFacebook\r\n```\r\n\r\n## Support\r\n\r\nCurrently supported features of the Facebook SDK:\r\n\r\n* User Authentication (login, logout etc)\r\n* Graph API\r\n* UI\r\n* XFBML.parse\r\n\r\n## Usage\r\n\r\n### Initialisation\r\n\r\nInclude the module in your app and initialise it during the application config block in the same manner you would initialise the FB SDK:\r\n\r\n```javascript\r\nangular\r\n    .module('my-angularjs-app', ['facebook'])\r\n    .config(['$facebookProvider', function($facebookProvider) {\r\n        $facebookProvider.init({\r\n            appId: 'myFbApplicationId',\r\n            channel: '//path/to/channel.html'\r\n        });\r\n    }]);\r\n\r\n### Methods\r\nUse `$facebook` as you would FB. Method and property names are the same as on the traditional FB object, except that they use promises instead of callbacks.\r\n\r\n```javascript\r\nangular\r\n    .module('my-angularjs-app')\r\n    .controller('my-controller', ['$facebook', function($facebook) {\r\n        // bind directly to the response promise\r\n        $scope.loginStatus = $facebook.getLoginStatus();\r\n\r\n        // use the promise in code\r\n        $facebook.getLoginStatus().then(\r\n            function(response) {\r\n                $scope.loginResponse = response;\r\n            },\r\n            function(response) {\r\n                $scope.loginError = response.error;\r\n            }\r\n        );\r\n    }]);\r\n```\r\n\r\nThe one exception to this is `$facebook.getAuthResponse` which is synchronous.\r\n\r\n### Events\r\n\r\nEvents from the Facebook SDK are then broadcast through the `$rootScope` of the application. The naming convention is to use the same event name as the Facebook SDK, prepended with *'facebook.'* - so *'auth.authResponseChange'* is broadcast as *'facebook.auth.authResponseChange'*. Consume these events as you would any other angular event:\r\n\r\n```javascript\r\nangular\r\n    .module('my-angularjs-app')\r\n    .controller('another-controller', ['$scope', '$facebook', function($scope, $facebook) {\r\n        $scope.$on('facebook.auth.authResponseChange', function(response) {\r\n            $scope.authStatus = response.status;\r\n        });\r\n    }]);\r\n```\r\n\r\n### XFBML.parse\r\n\r\nWhen the Facebook SDK loads, it parses FBML mark up on the page and renders it in the browser (e.g. *fb:activity*, *fb:login*, etc). However, in an Angular app that uses routing when a new view loads this parser doesn't automatically run. Instead you need to manually call FB.XFBML.parse() in order to render the FBML elements.\r\n\r\nThe `$facebook.parse()` method wraps this function so that you can render FBML elements from within your Angular app.\r\n\r\n```javascript\r\nangular\r\n    .module('my-angularjs-app')\r\n    .controller('my-controller', ['$facebook', function($facebook) {\r\n        // Render FBML elements\r\n        $facebook.parse();\r\n    }]);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}